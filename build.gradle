import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'cmd','git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def hasUnstaged = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout
    }
    def result = stdout.toString().replaceAll("M gradlew", "").trim()
    if (!result.isEmpty())
        println("Found stageable results:\n${result}\n")
    return !result.isEmpty()
}

def hasCommandInstalled = { cmd ->
    if (!DefaultNativePlatform.currentOperatingSystem.isWindows())
        return true
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    return exec {
        ignoreExitValue = true
        standardOutput = stdout
        errorOutput = stderr
        commandLine "where", cmd
    }.getExitValue() == 0 && stdout.toString().trim().contains(cmd)
}

ext.getGitInfo = { ->
    if (!hasCommandInstalled("git")) {
        println("No git install found in PATH")
        return "NOGIT"
    }
    def stdout = new ByteArrayOutputStream()
    exec {
        standardOutput = stdout
        commandLine "git", "--version"
    }
    println(stdout.toString().trim())
    def gitstage = "${getGitHash()}" + (hasUnstaged() ? "-modified" : "")
    println("Using git stage ${gitstage}")
    return gitstage
} as Closure<String>
